const C = require('../../fixtures/constants');
const S = require('../../fixtures/settings');
const D = require('../../fixtures/data');
const api = require('../../api-utils/api-spec');
const ui = require('../../pages/ui-spec');
const helper = require('../../support/e2e-helper');
const E = require("../../fixtures/files/excel-data");

const orgAdmin = S.getUserData(S.userAccounts.orgAdmin),
    powerUser = S.getUserData(S.userAccounts.powerUser),
    regularUser = S.getUserData(S.userAccounts.basicUser),
    equals = C.searchCriteria.inputFields.equals,
    notEquals = C.searchCriteria.multiSelectFields.notEquals,
    equalsOr = C.searchCriteria.multiSelectFields.equalsOr,
    equalsAnd = C.searchCriteria.multiSelectFields.equalsAnd,
    contains = C.searchCriteria.inputFields.contains,
    textSearch = C.searchCriteria.inputFields.textSearch,
    before_ = C.searchCriteria.dates.before,
    after = C.searchCriteria.dates.after,
    between = C.searchCriteria.dates.between,
    exactly = C.searchCriteria.dates.exactly,
    newerThanX = C.searchCriteria.dates.newerThanX,
    olderThanX = C.searchCriteria.dates.olderThanX,
    betweenXandY = C.searchCriteria.dates.betweenXandY,
    currentWeek = C.searchCriteria.dates.currentWeek,
    lastWeek = C.searchCriteria.dates.lastWeek,
    monthToDate = C.searchCriteria.dates.monthToDate,
    lastMonth = C.searchCriteria.dates.lastMonth,
    yearToDate = C.searchCriteria.dates.yearToDate,
    lastYear = C.searchCriteria.dates.lastYear,
    currentMonth = helper.getCurrentMonthNumber(),
    currentYear = helper.getCurrentMonthYear();

    D.case0 = {},
    D.case1 = {},
    D.case2 = {},
    D.case3 = {},
    D.case4 = S.selectedEnvironment.oldActiveCase

describe('Cases Search', function () {

    before(function () {
        ui.app.clear_gmail_inbox()
        api.auth.get_tokens(orgAdmin);
        api.org_settings.set_Case_Level_Permissions_on_Org_Settings(false)
        D.generateNewDataSet();

        // all imported cases will be Closed
        D.newCase.active = false
        D.newCase.status = 'Closed'
        D.case1 = Object.assign({}, D.newCase)
        D.case2 = Object.assign({}, D.newCase)
        D.case3 = Object.assign({}, D.newCase)

        D.newCase = {
            caseNumber: 'searchCase1_' + S.currentDateAndTime,
            caseOfficerIds: [orgAdmin.id],
            caseOfficerGroupIds: [S.selectedEnvironment.admin_userGroup.id],
            offenseType: S.selectedEnvironment.offenseType2.name,
            offenseTypeId: S.selectedEnvironment.offenseType2.id,
            offenseLocation: 'New York, NY, USA',
            offenseDate: C.currentDate_inCurrentFormat,
            offenseDateIsoFormat: C.currentDate_In_ISO_Format,
            closedDate: C.currentDate_inCurrentFormat,
            closedDateIsoFormat: C.currentDate_In_ISO_Format,
            reviewDate: C.currentDate_inCurrentFormat,
            reviewDateIsoFormat: C.currentDate_In_ISO_Format,
            offenseDescription: 'testing search',
            active: false,
            status: 'Open',
            reviewDateNotes: 'generated by automated test',
            tagsForApi: [S.selectedEnvironment.tagA],
            tags: [S.selectedEnvironment.tagA.name]
        }
        api.org_settings.enable_all_Case_fields();
        api.auto_disposition.edit(true);
        ui.userAdmin.add_and_verify_new_user_and_get_tokens()
        D.newCase.createdBy = D.newUser.fullName
        api.users.update_current_user_settings('newUser')

        D.case0 = Object.assign({}, D.newCase)
        api.cases.add_new_case(D.case0.caseNumber);

        //last week
        D.case1.caseNumber = 'searchCase_X.X.9_' + S.currentDateAndTime
        D.case1.createdDate = D.case1.offenseDate = D.case1.reviewDate = D.case1.closedDate
            = helper.getDateInPastInSpecificFormat('mm/dd/yyyy', 7)

        //last month
        D.case2.caseNumber = 'searchCase_X.X.11_' + S.currentDateAndTime
        D.case2.createdDate = D.case2.offenseDate = D.case2.reviewDate = D.case2.closedDate =
            (currentMonth > 1) ?
                (helper.getSpecificDateInSpecificFormat('mm/dd/yyyy', (currentMonth - 1) + '/1/' + currentYear)):
                    //+ ' 10 am') :
                (helper.getSpecificDateInSpecificFormat('mm/dd/yyyy', '12' + '/1/' + (currentYear - 1)))
                    //+ ' 10 am')

        //last year
        D.case3.caseNumber = 'searchCase_X.X.13_' + S.currentDateAndTime
        D.case3.createdDate = D.case3.offenseDate = D.case3.reviewDate = D.case3.closedDate
            = helper.getSpecificDateInSpecificFormat('mm/dd/yyyy', '1/1/' + (currentYear - 1))
            //+ ' 10 am'

        E.generateDataFor_CASES_Importer([D.case1, D.case2, D.case3]);
        cy.generate_excel_file('Cases_forTestingSearchParameters', E.caseImportDataWithAllFields);
        ui.menu.click_Tools__Data_Import();
        ui.importer.upload_then_Map_and_Submit_file_for_importing('Cases_forTestingSearchParameters', C.importTypes.cases)
            .verify_toast_message([
                C.toastMsgs.importComplete,
                3 + C.toastMsgs.recordsImported])
    });

    context('1 Org Admin', function () {

        context('1.1 Created By', function () {

            it('1.1.1 equals {email of the user (current user) who created a case}', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(D.newUser)
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Created_By(equals, D.newUser.email)
                    .click_Search()
                    .verify_data_on_the_grid(D.case0);
            });

            it('1.1.2 "Created By" equals {current user - checkbox}', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(D.newUser);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .select_current_user_checkbox_for_Created_By(equals)
                    .click_Search()
                    .verify_content_of_first_row_in_results_table(D.case0.caseNumber);
            });

            it('1.1.3 "Created By" equals {email of the user (NOT current user) who created a case}', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Created_By(equals, D.newUser.email)
                    .click_Search()
                    .verify_content_of_first_row_in_results_table(D.case0.caseNumber);
            });

            it('1.1.4 "Created By" not equals {email of the current user who did not create a case}', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .select_current_user_checkbox_for_Created_By(notEquals)
                    .enter_Case_Number(equals, D.newCase.caseNumber)
                    .click_Search()
                    .verify_content_of_first_row_in_results_table(D.case0.caseNumber);
            });
        });

        context('1.2 Created Date', function () {

            it('1.2.1 before', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                D.generateNewDataSet()
                ui.menu.click_Search__Case();
                let date = helper.getDateAfterXDaysFromSpecificDate(C.currentDateTimeFormat.mask, S.selectedEnvironment.oldActiveCase.createdDate, 1)
                ui.searchCase
                    .enter_Case_Number(equals, D.case4.caseNumber)
                    .enter_Created_Date(before_, date)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_content_of_first_row_in_results_table(D.case4.caseNumber)
            });

            it('1.2.2 after', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case0.caseNumber)
                    .enter_Created_Date(after, S.yesterdaysDate)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_content_of_first_row_in_results_table(D.case0.caseNumber)
            });

            it('1.2.3 between', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case0.caseNumber)
                    .enter_Created_Date(between, S.yesterdaysDate, S.tomorrowsDate)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_content_of_first_row_in_results_table(D.case0.caseNumber)
            });

            it('1.2.4 exactly', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case0.caseNumber)
                    .enter_Created_Date(exactly, S.currentDate)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_content_of_first_row_in_results_table(D.case0.caseNumber)
            });

            it('1.2.5 newer than X', function () {
                ui.app.log_title(this);

                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case0.caseNumber)
                    .enter_Created_Date(newerThanX, 3)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_content_of_first_row_in_results_table(D.case0.caseNumber)
            });

            it('1.2.6 older than X', function () {
                ui.app.log_title(this);
                let caseNo = S.selectedEnvironment.oldActiveCase.caseNumber;
                let date1 = helper.getCurrentDateInSpecificFormat('mm/dd/yyyy')
                let date2 = S.selectedEnvironment.oldActiveCase.createdDate;
                let numberOfDaysSinceCaseWasCreated = helper.getNumberOfDaysBetween2Dates(date1, date2)

                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, caseNo)
                    .enter_Created_Date(olderThanX, numberOfDaysSinceCaseWasCreated - 1)
                    .click_Search()
                    .verify_text_is_present_on_main_container(caseNo)
            });

            it('1.2.7 between X and Y', function () {
                ui.app.log_title(this);
                let caseNo = S.selectedEnvironment.oldActiveCase.caseNumber;
                let date1 = helper.getCurrentDateInSpecificFormat('mm/dd/yyyy')
                let date2 = S.selectedEnvironment.oldActiveCase.createdDate;
                let numberOfDaysSinceCaseWasCreated = helper.getNumberOfDaysBetween2Dates(date1, date2)
                let olderThan_days = numberOfDaysSinceCaseWasCreated - 1
                let newerThan_days = numberOfDaysSinceCaseWasCreated + 1

                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, caseNo)
                    .enter_Created_Date(betweenXandY, newerThan_days, olderThan_days)
                    .click_Search()
                    .set_page_size(50)
                    .verify_text_is_present_on_main_container(caseNo)
            });

            it('1.2.8 Current week', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case0.caseNumber)
                    .enter_Created_Date(currentWeek)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_content_of_first_row_in_results_table(D.case0.caseNumber)
            });

            it('1.2.9 Last week', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase.enter_Created_Date(lastWeek)
                    .enter_Case_Number(equals, D.case1.caseNumber)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .set_page_size(50)
                    .verify_text_is_present_on_main_container(D.case1.caseNumber)
            });

            it('1.2.10 Month to date', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case0.caseNumber)
                    .enter_Created_Date(monthToDate)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_text_is_present_on_main_container(D.case0.caseNumber)
            });

            it('1.2.11 Last Month', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase.enter_Created_Date(lastMonth)
                    .enter_Case_Number(equals, D.case2.caseNumber)
                    .click_Search()
                    .sort_by_ascending_order('Created Date')
                    .verify_text_is_present_on_main_container(D.case2.caseNumber)
            });

            it('1.2.12 Year to date', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case0.caseNumber)
                    .enter_Created_Date(yearToDate)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_text_is_present_on_main_container(D.case0.caseNumber)
            });

            it('1.2.13 Last Year', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case3.caseNumber)
                    .enter_Created_Date(lastYear)
                    .click_Search()
                    .sort_by_ascending_order('Created Date')
                    .verify_text_is_present_on_main_container(D.case3.caseNumber)
            });
        });

        context('1.3 Case Number', function () {

            it('1.3.1 equals', function () {
                ui.app.log_title(this);
                let caseNo = D.case0.caseNumber;
                api.auth.get_tokens(orgAdmin);
                ui.searchCase.run_search_by_Case_Number(equals, caseNo)
                    .verify_records_count_on_grid(1)
                    .verify_data_on_the_grid(D.case0)
            });

            it('1.3.2 not equals', function () {
                ui.app.log_title(this);
                let caseNo = D.case0.caseNumber + 1;
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase.enter_Case_Number(notEquals, caseNo)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_text_is_NOT_present_on_main_container(caseNo)
            });
        });

        context('1.4 Case Officer(s)', function () {

            context('1.4.1 equals (or)', function () {

                it('1.4.1.1 UserA saved in Case Officer(s) field ---> UserA and UserB selected in Search criteria', function () {
                    ui.app.log_title(this);
                    api.auth.get_tokens(orgAdmin);
                    D.generateNewDataSet()
                    const userA = orgAdmin
                    const userB = regularUser
                    D.newCase.caseOfficerGroupIds = []
                    D.newCase.caseOfficerIds = [userA.id]
                    api.cases.add_new_case()

                    ui.menu.click_Search__Case();
                    ui.searchCase
                        .enter_Case_Number(equals, D.newCase.caseNumber)
                        .enter_Case_Officers(equalsOr, [userA.name, userB.name])
                        .click_Search()
                        .sort_by_descending_order('Created Date')
                        .verify_data_on_the_grid(D.newCase)
                });

                it('1.4.1.2 UserGroupA saved in Case Officer(s) field ---> UserGroupA, UserGroupB and UserB selected in Search criteria', function () {
                    ui.app.log_title(this);
                    api.auth.get_tokens(orgAdmin);
                    D.generateNewDataSet()
                    const userGroupA = S.selectedEnvironment.admin_userGroup
                    const userGroupB = S.selectedEnvironment.readOnly_userGroup
                    const userB = regularUser
                    D.newCase.caseOfficers = [userGroupA.name]
                    D.newCase.caseOfficerGroupIds = [userGroupA.id]
                    D.newCase.caseOfficerIds = []
                    api.cases.add_new_case()

                    ui.menu.click_Search__Case();
                    ui.searchCase
                        .enter_Case_Number(equals, D.newCase.caseNumber)
                        .enter_Case_Officers(equalsOr, [userGroupA.name, userB.name])
                        .click_Search()
                        .sort_by_descending_order('Created Date')
                        .verify_data_on_the_grid(D.newCase)
                });

                it('1.4.1.3 UserGroupA and UserA saved in Case Officer(s) field ---> UserA selected in Search criteria', function () {
                    ui.app.log_title(this);
                    api.auth.get_tokens(orgAdmin);
                    D.generateNewDataSet()
                    const userGroupA = S.selectedEnvironment.admin_userGroup
                    const userA = regularUser
                    D.newCase.caseOfficerGroupIds = [userGroupA.id]
                    D.newCase.caseOfficerIds = [userA.id]
                    D.newCase.caseOfficers = [userGroupA.name, userA.name]
                    api.cases.add_new_case()

                    ui.menu.click_Search__Case();
                    ui.searchCase
                        .enter_Case_Number(equals, D.newCase.caseNumber)
                        .enter_Case_Officers(equalsOr, [userA.name])
                        .click_Search()
                        .sort_by_descending_order('Created Date')
                        .verify_data_on_the_grid(D.newCase)
                });

                it('1.4.1.4 UserA saved in Case Officer(s) field ---> UserGroupA selected in Search criteria', function () {
                    ui.app.log_title(this);
                    api.auth.get_tokens(orgAdmin);
                    D.generateNewDataSet()
                    const userGroupA = S.selectedEnvironment.admin_userGroup
                    const userA = regularUser
                    D.newCase.caseOfficerGroupIds = []
                    D.newCase.caseOfficerIds = [userA.id]
                    D.newCase.caseOfficers = [userA.name]
                    api.cases.add_new_case()

                    ui.menu.click_Search__Case();
                    ui.searchCase
                        .enter_Case_Number(equals, D.newCase.caseNumber)
                        .enter_Case_Officers(equalsOr, [userGroupA.name])
                        .click_Search()
                        .sort_by_descending_order('Created Date')
                        .verify_text_is_NOT_present_on_main_container(D.newCase.caseNumber)
                });

            })

            context('1.4.2 equals (and)', function () {

                it('1.4.2.1 UserA saved in Case Officer(s) field ---> UserA and UserB selected in Search criteria', function () {
                    ui.app.log_title(this);
                    api.auth.get_tokens(orgAdmin);
                    D.generateNewDataSet()
                    const userA = orgAdmin
                    const userB = regularUser
                    D.newCase.caseOfficerGroupIds = []
                    D.newCase.caseOfficerIds = [userA.id]
                    api.cases.add_new_case()

                    ui.menu.click_Search__Case();
                    ui.searchCase
                        .enter_Case_Number(equals, D.newCase.caseNumber)
                        .enter_Case_Officers(equalsAnd, [userA.name, userB.name])
                        .click_Search()
                        .sort_by_descending_order('Created Date')
                        .verify_text_is_NOT_present_on_main_container(D.newCase.caseNumber)
                });

                it('1.4.2.2 UserGroupA saved in Case Officer(s) field ---> UserGroupA and UserB selected in Search criteria', function () {
                    ui.app.log_title(this);
                    api.auth.get_tokens(orgAdmin);
                    D.generateNewDataSet()
                    const userGroupA = S.selectedEnvironment.admin_userGroup
                    const userB = regularUser
                    D.newCase.caseOfficerGroupIds = [userGroupA.id]
                    D.newCase.caseOfficerIds = []
                    api.cases.add_new_case()

                    ui.menu.click_Search__Case();
                    ui.searchCase
                        .enter_Case_Number(equals, D.newCase.caseNumber)
                        .enter_Case_Officers(equalsAnd, [userGroupA.name,  userB.name])
                        .click_Search()
                        .sort_by_descending_order('Created Date')
                        .verify_text_is_NOT_present_on_main_container(D.newCase.caseNumber)
                });

                it('1.4.2.3 UserA, UserB and UserGroupA saved in Case Officer(s) field ---> UserA, UserB and UserGroupA selected in Search criteria', function () {
                    ui.app.log_title(this);
                    api.auth.get_tokens(orgAdmin);
                    D.generateNewDataSet()
                    const userA = orgAdmin
                    const userB = regularUser
                    const userGroupA = S.selectedEnvironment.admin_userGroup
                    D.newCase.caseOfficerGroupIds = [userGroupA.id]
                    D.newCase.caseOfficerIds = [userA.id, userB.id]
                    D.newCase.caseOfficers = [userA.name, userB.name, userGroupA.name]
                    api.cases.add_new_case()

                    ui.menu.click_Search__Case();
                    ui.searchCase
                        .enter_Case_Number(equals, D.newCase.caseNumber)
                        .enter_Case_Officers(equalsAnd, [userA.name, userGroupA.name])
                        .click_Search()
                        .sort_by_descending_order('Created Date')
                        .verify_data_on_the_grid(D.newCase)
                });
            })

            context('1.4.3 not equals', function () {

                it('1.4.3.1 UserA saved in Case Officer(s) field ---> UserA and UserB selected in Search criteria', function () {
                    ui.app.log_title(this);
                    api.auth.get_tokens(orgAdmin);
                    D.generateNewDataSet()
                    const userA = orgAdmin
                    const userB = regularUser
                    D.newCase.caseOfficerGroupIds = []
                    D.newCase.caseOfficerIds = [userA.id]
                    D.newCase.caseOfficers = [userA.name]
                    api.cases.add_new_case()

                    ui.menu.click_Search__Case();
                    ui.searchCase
                        .enter_Case_Number(equals, D.newCase.caseNumber)
                        .enter_Case_Officers(notEquals, [userA.name,userB.name])
                        .click_Search()
                        .sort_by_descending_order('Created Date')
                        .verify_text_is_NOT_present_on_main_container(D.newCase.caseNumber)
                });

                it('1.4.3.2 UserA saved in Case Officer(s) field ---> UserA selected in Search criteria', function () {
                    ui.app.log_title(this);
                    api.auth.get_tokens(orgAdmin);
                    D.generateNewDataSet()
                    const userA = orgAdmin
                    D.newCase.caseOfficerGroupIds = []
                    D.newCase.caseOfficerIds = [userA.id]
                    api.cases.add_new_case()

                    ui.menu.click_Search__Case();
                    ui.searchCase
                        .enter_Case_Number(equals, D.newCase.caseNumber)
                        .enter_Case_Officers(notEquals, [userA.name])
                        .click_Search()
                        .sort_by_descending_order('Created Date')
                        .verify_text_is_NOT_present_on_main_container(D.newCase.caseNumber)
                });

                it('1.4.3.3 UserA saved in Case Officer(s) field ---> UserB selected in Search criteria', function () {
                    ui.app.log_title(this);
                    api.auth.get_tokens(orgAdmin);
                    D.generateNewDataSet()
                    const userA = orgAdmin
                    const userB = regularUser
                    D.newCase.caseOfficerGroupIds = []
                    D.newCase.caseOfficerIds = [userA.id]
                    api.cases.add_new_case()

                    ui.menu.click_Search__Case();
                    ui.searchCase
                        .enter_Case_Number(equals, D.newCase.caseNumber)
                        .enter_Case_Officers(notEquals, [userB.name])
                        .click_Search()
                        .sort_by_descending_order('Created Date')
                        .verify_data_on_the_grid(D.newCase)
                });

                it('1.4.3.4 UserGroupA saved in Case Officer(s) field ---> UserGroupA selected in Search criteria', function () {
                    ui.app.log_title(this);
                    api.auth.get_tokens(orgAdmin);
                    D.generateNewDataSet()
                    const userGroupA = S.selectedEnvironment.admin_userGroup
                    D.newCase.caseOfficerGroupIds = [userGroupA.id]
                    D.newCase.caseOfficerIds = []
                    api.cases.add_new_case()

                    ui.menu.click_Search__Case();
                    ui.searchCase
                        .enter_Case_Number(equals, D.newCase.caseNumber)
                        .enter_Case_Officers(notEquals, [userGroupA.name])
                        .click_Search()
                        .sort_by_descending_order('Created Date')
                        .verify_text_is_NOT_present_on_main_container(D.newCase.caseNumber)
                });

                it('1.4.3.5 UserGroupA and UserB saved in Case Officer(s) field ---> UserB selected in Search criteria', function () {
                    ui.app.log_title(this);
                    api.auth.get_tokens(orgAdmin);
                    D.generateNewDataSet()
                    const userGroupA = S.selectedEnvironment.admin_userGroup
                    const userB = regularUser
                    D.newCase.caseOfficerGroupIds = [userGroupA.id]
                    D.newCase.caseOfficerIds = [userB.id]
                    api.cases.add_new_case()

                    ui.menu.click_Search__Case();
                    ui.searchCase
                        .enter_Case_Number(equals, D.newCase.caseNumber)
                        .enter_Case_Officers(notEquals, [userB.name])
                        .click_Search()
                        .sort_by_descending_order('Created Date')
                        .verify_text_is_NOT_present_on_main_container(D.newCase.caseNumber)
                });

                it('1.4.3.6 UserGroupA saved in Case Officer(s) field ---> UserGroupB selected in Search criteria', function () {
                    ui.app.log_title(this);
                    api.auth.get_tokens(orgAdmin);
                    D.generateNewDataSet()
                    const userGroupA = S.selectedEnvironment.admin_userGroup
                    const userGroupB = S.selectedEnvironment.readOnly_userGroup
                    D.newCase.caseOfficerGroupIds = [userGroupA.id]
                    D.newCase.caseOfficerIds = []
                    D.newCase.caseOfficers = [userGroupA.name]
                    api.cases.add_new_case()

                    ui.menu.click_Search__Case();
                    ui.searchCase
                        .enter_Case_Number(equals, D.newCase.caseNumber)
                        .enter_Case_Officers(notEquals, [userGroupB.name])
                        .click_Search()
                        .sort_by_descending_order('Created Date')
                        .verify_data_on_the_grid(D.newCase)
                });
            })
        });

        context('1.5 Offense Type', function () {

            it('1.5.1 equals', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case0.caseNumber)
                    .select_Offense_Type(equals, D.case0.offenseType)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_data_on_the_grid(D.case0);
            });

            it('1.5.2 not equals', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case0.caseNumber)
                    .select_Offense_Type(notEquals, D.case0.offenseType)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_text_is_NOT_present_on_main_container(D.case0.caseNumber);
            });
        });

        context('1.6 Offense Location', function () {

            it('1.6.1 equals', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.newCase.caseNumber)
                    .enter_Offense_Location(equals, D.newCase.offenseLocation)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_data_on_the_grid(D.newCase);
            });

            it('1.6.2 not equals', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.newCase.caseNumber)
                    .enter_Offense_Location(notEquals, D.newCase.offenseLocation)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_text_is_NOT_present_on_main_container(D.newCase.caseNumber);
            });
        });

        context('1.7 Offense Date', function () {

            it('1.7.1 before', function () {
                ui.app.log_title(this);
                let caseNo = S.selectedEnvironment.oldActiveCase.caseNumber
                let date1 = S.selectedEnvironment.oldActiveCase.offenseDate;
                let date2 = helper.getDateAfterXDaysFromSpecificDate('mm/dd/yy', date1, 1)
                api.auth.get_tokens(orgAdmin);
                D.generateNewDataSet()
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, caseNo)
                    .enter_Offense_Date(before_, date2)
                    .click_Search()
                    .sort_by_descending_order('Offense Date')
                    .verify_content_of_first_row_in_results_table(caseNo)
            });

            it('1.7.2 after', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case0.caseNumber)
                    .enter_Offense_Date(after, S.yesterdaysDate)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_content_of_first_row_in_results_table(D.case0.caseNumber)
            });

            it('1.7.3 between', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case0.caseNumber)
                    .enter_Offense_Date(between, S.yesterdaysDate, S.tomorrowsDate)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_content_of_first_row_in_results_table(D.case0.caseNumber)
            });

            it('1.7.4 exactly', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case0.caseNumber)
                    .enter_Offense_Date(exactly, S.currentDate)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_content_of_first_row_in_results_table(D.case0.caseNumber)
            });

            it('1.7.5 newer than X', function () {
                ui.app.log_title(this);

                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case0.caseNumber)
                    .enter_Offense_Date(newerThanX, 3)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_content_of_first_row_in_results_table(D.case0.caseNumber)
            });

            it('1.7.6 older than X', function () {
                ui.app.log_title(this);
                let caseNo = S.selectedEnvironment.oldActiveCase.caseNumber;
                let date1 = helper.getCurrentDateInSpecificFormat('mm/dd/yyyy')
                let date2 = S.selectedEnvironment.oldActiveCase.offenseDate;
                let numberOfDaysSinceOffenseDate = helper.getNumberOfDaysBetween2Dates(date1, date2)

                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, caseNo)
                    .enter_Offense_Date(olderThanX, numberOfDaysSinceOffenseDate - 1)
                    .click_Search()
                    .verify_text_is_present_on_main_container(caseNo)
            });

            it('1.7.7 between X and Y', function () {
                ui.app.log_title(this);
                let caseNo = S.selectedEnvironment.oldActiveCase.caseNumber;
                let date1 = helper.getCurrentDateInSpecificFormat('mm/dd/yyyy')
                let date2 = S.selectedEnvironment.oldActiveCase.offenseDate;
                let numberOfDaysSinceOffenseDate = helper.getNumberOfDaysBetween2Dates(date1, date2)
                let olderThan_days = numberOfDaysSinceOffenseDate - 1
                let newerThan_days = numberOfDaysSinceOffenseDate + 1

                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, caseNo)
                    .enter_Offense_Date(betweenXandY, newerThan_days, olderThan_days)
                    .click_Search()
                    .sort_by_descending_order('Offense Date')
                    .set_page_size(50)
                    .verify_text_is_present_on_main_container(caseNo)
            });

            it('1.7.8 Current week', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case0.caseNumber)
                    .enter_Offense_Date(currentWeek)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_content_of_first_row_in_results_table(D.case0.caseNumber)
            });

            it('1.7.9 Last week', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case1.caseNumber)
                    .enter_Offense_Date(lastWeek)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .set_page_size(50)
                    .verify_text_is_present_on_main_container(D.case1.caseNumber)
            });

            it('1.7.10 Month to date', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case0.caseNumber)
                    .enter_Offense_Date(monthToDate)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_text_is_present_on_main_container(D.case0.caseNumber)
            });

            it('1.7.11 Last Month', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case2.caseNumber)
                    .enter_Offense_Date(lastMonth)
                    .click_Search()
                    .sort_by_ascending_order('Created Date')
                    .verify_text_is_present_on_main_container(D.case2.caseNumber)
            });

            it('1.7.12 Year to date', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case0.caseNumber)
                    .enter_Offense_Date(yearToDate)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_text_is_present_on_main_container(D.case0.caseNumber)
            });

            it('1.7.13 Last Year', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case3.caseNumber)
                    .enter_Offense_Date(lastYear)
                    .click_Search()
                    .sort_by_ascending_order('Created Date')
                    .verify_text_is_present_on_main_container(D.case3.caseNumber)
            });
        });

        context('1.8 Offense Description', function () {

            it('1.8.1 equals', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case0.caseNumber)
                    .enter_Offense_Description(equals, D.case0.offenseDescription)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_data_on_the_grid(D.case0);
            });

            it('1.8.2 not equals', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case0.caseNumber)
                    .enter_Offense_Description(notEquals, D.case0.offenseDescription)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_text_is_NOT_present_on_main_container(D.case0.caseNumber);
            });
        });

        context('1.9 Active', function () {

            it('1.9.1 equals', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case0.caseNumber)
                    .select_option_on_Active_dropdown(equals, D.case0.active)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_data_on_the_grid(D.case0);
            });

            it('1.9.2 not equals', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case0.caseNumber)
                    .select_option_on_Active_dropdown(notEquals, D.case0.active)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_text_is_NOT_present_on_main_container(D.case0.caseNumber);
            });
        });

        context('1.10 Tags', function () {

            context('1.10.1 equals (or)', function () {
                it('1.10.1.1 TagA and TagB saved in Tags field ---> TagA, TagB and TagC selected in Search criteria', function () {
                    ui.app.log_title(this);
                    api.auth.get_tokens(orgAdmin);
                    D.generateNewDataSet()
                    const tagA = 'Tag_A__'
                    const tagB = 'Tag_B__'
                    const tagC = 'Tag_C__'
                    D.newCase.tags = [tagA, tagB]
                    D.newCase.tagsForApi = [S.selectedEnvironment.tagA, S.selectedEnvironment.tagB]
                    api.cases.add_new_case()

                    ui.menu.click_Search__Case();
                    ui.searchCase
                        .enter_Case_Number(equals, D.newCase.caseNumber)
                        .enter_Tags(equalsOr, tagA)
                        .enter_Tags(equalsOr, tagB)
                        .enter_Tags(equalsOr, tagC)
                        .click_Search()
                        .sort_by_descending_order('Created Date')
                        .verify_data_on_the_grid(D.newCase)
                });

                it('1.10.1.2 TagA saved in Tags field ---> TagA selected in Search criteria', function () {
                    ui.app.log_title(this);
                    api.auth.get_tokens(orgAdmin);
                    D.generateNewDataSet()
                    const tagA = 'Tag_A__'
                    D.newCase.tags = [tagA]
                    D.newCase.tagsForApi = [S.selectedEnvironment.tagA]
                    api.cases.add_new_case()

                    ui.menu.click_Search__Case();
                    ui.searchCase
                        .enter_Case_Number(equals, D.newCase.caseNumber)
                        .enter_Tags(equalsOr, tagA)
                        .click_Search()
                        .sort_by_descending_order('Created Date')
                        .verify_data_on_the_grid(D.newCase)
                });

            })

            context('1.10.2 equals (and)', function () {
                it('1.10.2.1 TagA saved in Tags field ---> TagA and TagB selected in Search criteria', function () {
                    ui.app.log_title(this);
                    api.auth.get_tokens(orgAdmin);
                    D.generateNewDataSet()
                    const tagA = 'Tag_A__'
                    const tagB = 'Tag_B__'
                    D.newCase.tags = [tagA]
                    D.newCase.tagsForApi = [S.selectedEnvironment.tagA]
                    api.cases.add_new_case()

                    ui.menu.click_Search__Case();
                    ui.searchCase
                        .enter_Case_Number(equals, D.newCase.caseNumber)
                        .enter_Tags(equalsAnd, tagA)
                        .enter_Tags(equalsAnd, tagB)
                        .click_Search()
                        .sort_by_descending_order('Created Date')
                        .verify_text_is_NOT_present_on_main_container(D.newCase.caseNumber)
                });

                it('1.10.2.2 TagA and TagB saved in Tags field ---> TagA selected in Search criteria', function () {
                    ui.app.log_title(this);
                    api.auth.get_tokens(orgAdmin);
                    D.generateNewDataSet()
                    const tagA = 'Tag_A__'
                    const tagB = 'Tag_B__'
                    D.newCase.tags = [tagA, tagB]
                    D.newCase.tagsForApi = [S.selectedEnvironment.tagA, S.selectedEnvironment.tagB]
                    api.cases.add_new_case()

                    ui.menu.click_Search__Case();
                    ui.searchCase
                        .enter_Case_Number(equals, D.newCase.caseNumber)
                        .enter_Tags(equalsAnd, tagA)
                        .click_Search()
                        .sort_by_descending_order('Created Date')
                        .verify_data_on_the_grid(D.newCase)
                });
            });

            context('1.10.3 not equals', function () {
                it('1.10.3.1 TagA saved in Tags field ---> TagA and TagB selected in Search criteria', function () {
                    ui.app.log_title(this);
                    api.auth.get_tokens(orgAdmin);
                    D.generateNewDataSet()
                    const tagA = 'Tag_A__'
                    const tagB = 'Tag_B__'
                    D.newCase.tags = [tagA]
                    D.newCase.tagsForApi = [S.selectedEnvironment.tagA]
                    api.cases.add_new_case()

                    ui.menu.click_Search__Case();
                    ui.searchCase
                        .enter_Case_Number(equals, D.newCase.caseNumber)
                        .enter_Tags(notEquals, tagA)
                        .enter_Tags(notEquals, tagB)
                        .click_Search()
                        .sort_by_descending_order('Created Date')
                        .verify_text_is_NOT_present_on_main_container(D.newCase.caseNumber)
                });
            });

        });

        context('1.13 Closed Date', function () {

            it('1.13.1 before', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                D.generateNewDataSet()
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case0.caseNumber)
                    .enter_Closed_Date(before_, S.tomorrowsDate)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_content_of_first_row_in_results_table(D.case0.caseNumber)
            });

            it('1.13.2 after', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case0.caseNumber)
                    .enter_Closed_Date(after, S.yesterdaysDate)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_content_of_first_row_in_results_table(D.case0.caseNumber)
            });

            it('1.13.3 between', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case0.caseNumber)
                    .enter_Closed_Date(between, S.yesterdaysDate, S.tomorrowsDate)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_content_of_first_row_in_results_table(D.case0.caseNumber)
            });

            it('1.13.4 exactly', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case0.caseNumber)
                    .enter_Closed_Date(exactly, S.currentDate)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_content_of_first_row_in_results_table(D.case0.caseNumber)
            });

            it('1.13.5 newer than X', function () {
                ui.app.log_title(this);

                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case0.caseNumber)
                    .enter_Closed_Date(newerThanX, 3)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_content_of_first_row_in_results_table(D.case0.caseNumber)
            });

            it('1.13.6 older than X', function () {
                ui.app.log_title(this);
                let caseNo = D.case3.caseNumber;
                let date1 = helper.getCurrentDateInSpecificFormat('mm/dd/yyyy')
                let date2 = D.case3.closedDate;
                let numberOfDaysSinceClosedDate = helper.getNumberOfDaysBetween2Dates(date1, date2)

                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, caseNo)
                    .enter_Closed_Date(olderThanX, numberOfDaysSinceClosedDate - 1)
                    .click_Search()
                    .verify_text_is_present_on_main_container(caseNo)
            });

            it('1.13.7 between X and Y', function () {
                ui.app.log_title(this);
                let caseNo = S.selectedEnvironment.oldClosedCase.caseNumber;
                let date1 = helper.getCurrentDateInSpecificFormat('mm/dd/yyyy')
                let date2 = S.selectedEnvironment.oldClosedCase.closedDate;
                let numberOfDaysSinceClosedDate = helper.getNumberOfDaysBetween2Dates(date1, date2)
                let olderThan_days = numberOfDaysSinceClosedDate - 1
                let newerThan_days = numberOfDaysSinceClosedDate + 1

                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, caseNo)
                    .enter_Closed_Date(betweenXandY, newerThan_days, olderThan_days)
                    .click_Search()
                    .set_page_size(50)
                    .verify_text_is_present_on_main_container(caseNo)
            });

            it('1.13.8 Current week', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case0.caseNumber)
                    .enter_Closed_Date(currentWeek)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_content_of_first_row_in_results_table(D.case0.caseNumber)
            });

            it('1.13.9 Last week', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case1.caseNumber)
                    .enter_Closed_Date(lastWeek)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .set_page_size(50)
                    .verify_text_is_present_on_main_container(D.case1.caseNumber)
            });

            it('1.13.10 Month to date', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case0.caseNumber)
                    .enter_Closed_Date(monthToDate)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_text_is_present_on_main_container(D.case0.caseNumber)
            });

            it('1.13.11 Last Month', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case2.caseNumber)
                    .enter_Closed_Date(lastMonth)
                    .click_Search()
                    .sort_by_ascending_order('Created Date')
                    .verify_text_is_present_on_the_grid(D.case2.caseNumber)
            });

            it('1.13.12 Year to date', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case0.caseNumber)
                    .enter_Closed_Date(yearToDate)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_text_is_present_on_main_container(D.case0.caseNumber)
            });

            it('1.13.13 Last Year', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case3.caseNumber)
                    .enter_Closed_Date(lastYear)
                    .click_Search()
                    .sort_by_ascending_order('Created Date')
                    .verify_text_is_present_on_main_container(D.case3.caseNumber)
            });
        });

        context('1.14 Review Date', function () {

            it('1.14.1 before', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                D.generateNewDataSet()
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case0.caseNumber)
                    .enter_Review_Date(before_, S.tomorrowsDate)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_content_of_first_row_in_results_table(D.case0.caseNumber)
            });

            it('1.14.2 after', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case0.caseNumber)
                    .enter_Review_Date(after, S.yesterdaysDate)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_content_of_first_row_in_results_table(D.case0.caseNumber)
            });

            it('1.14.3 between', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case0.caseNumber)
                    .enter_Review_Date(between, S.yesterdaysDate, S.tomorrowsDate)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_content_of_first_row_in_results_table(D.case0.caseNumber)
            });

            it('1.14.4 exactly', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case0.caseNumber)
                    .enter_Review_Date(exactly, S.currentDate)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_content_of_first_row_in_results_table(D.case0.caseNumber)
            });

            it('1.14.5 newer than X', function () {
                ui.app.log_title(this);

                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case0.caseNumber)
                    .enter_Review_Date(newerThanX, 3)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_content_of_first_row_in_results_table(D.case0.caseNumber)
            });

            it('1.14.6 older than X', function () {
                //data are fixed in org3 pentest, failing in org2, but need to check what will be after executing
                //tests related to redistribute cases with past date
                ui.app.log_title(this);
                let caseNo = S.selectedEnvironment.oldActiveCase.caseNumber;
                let date1 = helper.getCurrentDateInSpecificFormat('mm/dd/yyyy')
                let date2 = S.selectedEnvironment.oldActiveCase.reviewDate;
                let numberOfDaysSinceReviewDate = helper.getNumberOfDaysBetween2Dates(date1, date2)

                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, caseNo)
                    .enter_Review_Date(olderThanX, numberOfDaysSinceReviewDate - 1)
                    .click_Search()
                    .verify_text_is_present_on_main_container(caseNo)
            });

            it('1.14.7 between X and Y', function () {
                // set data on pentest2
                ui.app.log_title(this);
                let caseNo = S.selectedEnvironment.oldActiveCase.caseNumber;
                let date1 = helper.getCurrentDateInSpecificFormat('mm/dd/yyyy')
                let date2 = S.selectedEnvironment.oldActiveCase.reviewDate;
                let numberOfDaysSinceReviewDate = helper.getNumberOfDaysBetween2Dates(date1, date2)
                let olderThan_days = numberOfDaysSinceReviewDate - 1
                let newerThan_days = numberOfDaysSinceReviewDate + 1

                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, caseNo)
                    .enter_Review_Date(betweenXandY, newerThan_days, olderThan_days)
                    .click_Search()
                    .set_page_size(50)
                    .verify_text_is_present_on_main_container(caseNo)
            });

            it('1.14.8 Current week', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case0.caseNumber)
                    .enter_Review_Date(currentWeek)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_content_of_first_row_in_results_table(D.case0.caseNumber)
            });

            it('1.14.9 Last week', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case1.caseNumber)
                    .enter_Review_Date(lastWeek)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .set_page_size(50)
                    .verify_text_is_present_on_main_container(D.case1.caseNumber)
            });

            it('1.14.10 Month to date', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case0.caseNumber)
                    .enter_Review_Date(monthToDate)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_text_is_present_on_main_container(D.case0.caseNumber)
            });

            it('1.14.11 Last Month', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case2.caseNumber)
                    .enter_Review_Date(lastMonth)
                    .click_Search()
                    .sort_by_ascending_order('Created Date')
                    .verify_text_is_present_on_main_container(D.case2.caseNumber)
            });

            it('1.14.12 Year to date', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case0.caseNumber)
                    .enter_Review_Date(yearToDate)
                    .click_Search()
                    .sort_by_descending_order('Created Date')
                    .verify_text_is_present_on_main_container(D.case0.caseNumber)
            });

            it('1.14.13 Last Year', function () {
                ui.app.log_title(this);
                api.auth.get_tokens(orgAdmin);
                ui.menu.click_Search__Case();
                ui.searchCase
                    .enter_Case_Number(equals, D.case3.caseNumber)
                    .enter_Review_Date(lastYear)
                    .click_Search()
                    .sort_by_ascending_order('Created Date')
                    .verify_text_is_present_on_main_container(D.case3.caseNumber)
            });
        });

    });
});
